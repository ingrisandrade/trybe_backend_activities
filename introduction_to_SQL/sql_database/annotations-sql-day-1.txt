- SGBD - Sistema de Gerenciamento de Banco de Dados.

- Principais tipos de BD:

    - Relacionais(SQL): Armazenam os dados em tabelas, onde existem linhas e colunas e extrutura pré-definida, sem alterações dinâmicas.
        - Previsibilidade.
        - Possibilidade de criar relacionamentos entre as tabelas.

    - Não relacionais(NoSQL): Também podem usar estruturas pré-definidas, mas não é obrigatório.
    - Os dados podem ser inseridos dinâmicamente, sem precisar alterar a estrutura do BD.
    - Não há uma linguagem de pesquisa fixa.

- Linhas representam um exemplo, ou instância, daquilo que se deseja representar.

- Colunas descrevem algum aspecto da entidade representada.

- INSTALANDO MYSQL SERVER COM DOCKER.

- docker container run --name container-mysql -e MYSQL_ROOT_PASSWORD=senha-mysql -d -p 3306:3306 mysql:5.7
    - Detalhes do comando:
      - --name | Nomeia o container, assim facilitando a identificação do mesmo;
      - -e | Utilizada para informar nossas variáveis de ambiente. (Aqui foi mantido o usuário padrão root que é recomendado pela documentação, e então, foi passada a variável MYSQL_ROOT_PASSWORD=senha-mysql para poder usar dentro do container);
      - -d | Faz com que o container rode em segundo plano;
      - -p | Indica qual porta no nosso sistema operacional o docker estará em funcionamento. A porta | 3306 do lado esquerdo | é a porta do nosso sistema, que receberá o container e a porta | 3306 lado direito | é a porta do container. Obs.: 3306 é a porta padrão do MySQL.
      - run | É responsável por criar e iniciar o container;

      - docker container stop container-mysql | Usado para parar o container.
      - docker container start container-mysql | Usado para voltar a execução do container.
      - docker container rm container-mysql | Usado para excluir o container.

- docker exec -it container-mysql bash | Para visualizar quais bancos de dados estão disponíveis, através do modo interativo do docker.
    - mysql -u root -p | Para acessar o mysql dentro do container. Obs.: Utiliza-se o usuário root, que é o padrào da imagem do MySQL.

- SHOW DATABASES; | Para ver todos os bancos de dados que estão instalados atualmente.

- Obs.: 
    - Por convenção, utilizamos as palavras chave do SQL em caixa alta para diferenciar das indicações de tabelas e colunas.
    - É fundamental utilizar o ; (ponto e vírgula) ao final de cada comando SQL, caso contrário ele não irá funcionar.

- USE | serve pra definir a referência do banco de dados que será utilizado na query. Exemplo:
    -  USE nome_do_banco_de_dados_que_quero_conectar;
        -- Exemplo de saída: USE trybe;

- banco_de_dados.tabela | Outra forma de fazer referência ao banco, sem precisar rodar o USE.

- SHOW TABLES; | Para retornar todas as tabelas inicializadas no seu server.

-  DESCRIBE nome_da_tabela; | Visualizar estrutura de uma tabela.
    -- Exemplo de saída: DESCRIBE students;

-  CREATE DATABASE nome_do_banco_de_dados; | Criar um banco de dados.
    -- Exemplo de saída: CREATE DATABASE trybe;

- CONSTRAINTS(RESTRIÇÕES), CHAVES PRIMÁRIAS E CHAVES ESTRANGEIRAS.

- As constraints são aplicadas às colunas das tabelas, isso garante que os dados inseridos serão consistentes.

- TIPOS DE CONSTRAINTS:

		- NOT NULL | Garante que aquele campo não pode conter valores nulos, ou seja, se não houver um valor padrão (DEFAULT) definido, será sempre necessário passar um valor para esse campo durante a inserção ou alteração de dados.

    - UNIQUE | Garante que o valor inserido na coluna da tabela é único, isto é, não pode haver outro valor igual para esta coluna registrado nesta tabela.

    - PRIMARY KEY | Garante que o valor seja a chave primária da tabela, ou seja, que a coluna que possui essa constraint aplicada seja o identificador único da tabela. Ela também é, por definição, não nula (mesmo efeito da constraint NOT NULL) e única (mesmo efeito da constraint UNIQUE).

    - FOREIGN KEY | Garante que o valor seja uma chave estrangeira da tabela, ou seja, faça referência à chave primária (valor em uma coluna com a constraint PRIMARY KEY) de outra tabela, permitindo um relacionamento entre tabelas.

    - DEFAULT | Garante que, caso nenhum valor seja inserido na coluna (ou caso a pessoa usuária insira um valor nulo), a constraint colocará o valor padrão passado para ela.

- ENTIDADE.

- A entidade é a tabela dentro de um banco de dados e as propriedades fazem parte dessa tabela.
    - Em alguns desses casos, as entidades são individuais e não se relacionam entre si, porém, às vezes, elas são ligadas umas às outras através de relacionamentos