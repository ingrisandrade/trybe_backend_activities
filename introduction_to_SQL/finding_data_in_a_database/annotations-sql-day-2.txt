- O QUE SÃO QUERIES:

- É o nome dado aos comandos que você digita dentro de uma janela ou linha de comando com a intenção de interagir de alguma maneira com uma base de dados.

- TIPOS DE QUERIES:
    - DDL: Data Definition Language - Todos os comandos que lidam com o esquema, a descrição e o modo como os dados devem existir em um banco de dados:

        - CREATE | Para criar bancos de dados, tabelas, índices, views, procedures, functions e triggers;

        - ALTER | Para alterar a estrutura de qualquer objeto;

        - DROP | Permite deletar objetos;

        - TRUNCATE | Apenas esvazia os dados dentro de uma tabela, mas a mantém no banco de dados.

    - DML: Data Manipulation Language - Comandos que são usados para manipular dados. São utilizados para armazenar, modificar, buscar e excluir dados em um banco de dados. Os comandos e usos mais comuns nesta categoria são:

        - SELECT | Usado para buscar dados em um banco de dados;

        - INSERT | Insere dados em uma tabela;

        - UPDATE | Altera dados dentro de uma tabela;

        - DELETE | Exclui dados de uma tabela.

    - DCL: Data Control Language - Mais focado nos comandos que concedem direitos, permissões e outros tipos de controle ao sistema de banco de dados.

        - GRANT | Concede acesso a um usuário;

        - REVOKE | Remove acessos concedidos através do comando | GRANT |.

    - TCL: Transactional Control Language - Lida com as transações dentro de suas pesquisas.

        - COMMIT | Muda suas alterações de temporárias para permanentes no seu banco de dados;

        - ROLLBACK | Desfaz todo o impacto realizado por um comando;

        - SAVEPOINT | Define pontos para os quais uma transação pode voltar. É uma maneira de voltar para pontos específicos de sua query;

        - TRANSACTION | Comandos que definem onde, como e em que escopo suas transações são executadas.


- SELECT, o primeiro passo:

- Usar o | SELECT | para gerar valores e usar o | AS | para dar nomes às colunas.

    - Rode cada um deles em uma janela de query para verificar os resultados:

        - SELECT 'Olá, bem-vindo ao SQL!';
        - SELECT 10;
        - SELECT now();
        - SELECT 20 * 2;
        - SELECT 50 / 2;
        - SELECT 18 AS idade;
        - SELECT 2019 AS ano;
        - SELECT 'Rafael', 'Martins', 25, 'Desenvolvedor Web';
        - SELECT 'Rafael' AS nome, 'Martins' AS sobrenome, 25 AS idade, 'Desenvolvedor Web' AS 'Área de atuação';

    - Observações feitas após rodar os comandos sem alterar o banco de dados:

        - É possível gerar e calcular valores usando apenas SELECT valor_a_ser_calculado_ou_exibido;

        - A palavra-chave AS permite dar nome às colunas para que elas façam mais sentido quando estiver lendo os resultados.
            - Obs.: Caso o nome tenha mais de uma palavra, deve-se usar aspas simples para nomear as colunas;

        - Sempre que finalizar uma query com ponto e vírgula ( ; );

        - Usar as palavras-chave (reservadas) em maiúsculo. Isso é uma convenção para facilitar a leitura da query.

Observaçcões feitas durante o desenvolvimento de um exercício:

- SELECT city, country_id FROM sakila.city;
    - Neste comando eu posso usar o * após o select e ele vai retornar todas as tabelas;
    - Caso eu queira apenas uma tabela posso trocar o * pelo nome da tabela;
    - Se eu quiser mais de uma tabela posso adicionar os nomes que eu quero e separá-las com vígula.
        - Lembrando que as tabelas serão exibidas seguindo a ordem do comando.

- E caso opte por não usar sempre o nome do DB para referenciá-lo é possível já selecioná-lo por padrão com o seguinte comando:

    - USE sakila;
    - SELECT city, country_id FROM city;

          - Dessa forma, após o FROM o DB já não precisa mais ser referenciado.

- CONCAT - juntando duas ou mais colunas.

    - SELECT * FROM sakila.actor; | Retorna a tabela completa.
    - SELECT CONCAT(first_name, last_name) FROM sakila.actor; | Retorna nome e sobrenorme junto.
    - SELECT CONCAT(first_name, " ", last_name) FROM sakila.actor; | Retorna com um espaço entre nome e sobrenome.
    - SELECT CONCAT(first_name, " ", last_name) AS "Nome Completo" FROM sakila.actor; | Retorna com espaćo entre nome e sobrenome e com a coluna nomeada por "Nome Completo".

