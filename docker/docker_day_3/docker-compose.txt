- ANOTA√á√ïES SOBRE DOCKER COMPOSE!

- Todo arquivo docker-compose.yaml deve iniciar com a chave version.
    - Exemplo: version: '3'

- Todo container √© criado a partir de uma imagem. Sendo assim, precisamos especific√°-las aos nossos servi√ßos.
    - image: | especifica uma imagem Docker pronta, seja local ou a ser baixada no Docker Hub;
    - build: | especifica a pasta contendo um arquivo Dockerfile a partir do qual o Compose vai executar o comando docker build automaticamente.

- MAPEAMENTO DE PORTAS!

- Dentro de cada servi√ßo, podemos especificar o ports, que √© uma lista de mapeamentos de portas entre o computador local e as portas do container.
- O primeiro par√¢metro √© sempre a porta do computador local e o segundo par√¢metro √© a porta exposta no container.

- E SE O CONTAINER APRESENTAR UM PROBLEMA?

- O Compose nos permite configurar uma pol√≠tica de reinicializa√ß√£o!
    - restart | Chave para configurar este comportamente:
      - O Compose possui quatro pol√≠ticas de reinicializa√ß√£o, sendo elas:
        - no | define que o container n√£o reiniciar√° automaticamente (Padr√£o);
        - on-failure | define que o container ser√° reiniciado caso ocorra alguma falha apontada pelo exit code, diferente de zero;
        - always | especifica que sempre que o servi√ßo parar, seja por um falha ou porque ele simplesmente finalizou sua execu√ß√£o, ele dever√° ser reiniciado;
        - unless-stopped | define que o container sempre ser√° reiniciado, a menos que utilizemos o comando docker stop <container> manualmente.

- USANDO VARIAV√âIS DE AMBIENTE:

- Uma vari√°vel de ambiente √© um recurso dispon√≠vel nos sistemas operacionais que permite criar uma vari√°vel no formato NOME_DA_VARI√ÅVEL=VALOR. Onde NOME_DA_VARI√ÅVEL √© o nome da vari√°vel de ambiente, e VALOR se refere a um valor que ser√° vinculado √† vari√°vel.
    - Exemplo => Ao digitar o seguinte comando: echo $USER
    - Ser√° apresentado o valor da vari√°vel de ambiente $USER, cujo valor √© o nome de usu√°rio da pessoa que est√° utilizando o sistema no momento da execu√ß√£o.

- environment | Chave utilizada para criar e usar variav√©is de ambiente dentro dos containers.

- DB_HOST | Nome do servi√ßo onde o banco de dados vai rodar.

- A ideia de vari√°veis de ambiente √© trazer mais dinamismo entre ambientes.
- Em cada ambiente a aplica√ß√£o consegue se conectar em banco de dados diferentes, isolando assim o ambiente de teste e o de produ√ß√£o.

- DEPEND√äNCIA ENTRE SERVI√áOS!

- depends_on | Cahve de config. importante para garantir a ordem de inicializa√ß√£o e encerramento dos nossos servi√ßos.

- A configura√ß√£o segue da seguinte forma:
    - Tr√™s servi√ßos, um deles usando uma imagem Docker pronta e dois com arquivo Dockerfile;
    - Mapeamos as portas de conex√£o;
    - Configuramos a pol√≠tica de reinicializa√ß√£o;
    - Criamos uma vari√°vel de ambiente;
    - Definimos a ordem de subida dos servi√ßos.

- SUBINDO TODOS OS SERVI√áOS!

- docker-compose up -d | Comando para a execu√ß√£o do compose.
    - -d | serve para executarmos todos os servi√ßos no modo segundo plano.
        - Sem esta flag, os logs dos tr√™s servi√ßos aparecem no console simultaneamente, dificultando a leitura.
    - docker-compose logs <nome-do-servi√ßo> | Comando para ler os logs de cada um dos servi√ßos posteriormente, caso o compose suba sem a flag -d.

- Al√©m de executar os containers, o Compose vai criar uma rede virtual padr√£o entre esses containers , permitindo a comunica√ß√£o entre eles.

- docker-compose ps | Para visualizar o status dos nossos servi√ßos.
    - Este comando traz um resumo do nome interno dos containers , se os containers est√£o saud√°veis e se as portas foram mapeadas corretamente.

- http://localhost:3000 | Para acessar o frontend e verificar se deu tudo certo. 

- RECONSTRUINDO A IMAGEM DOCKER

- --build | Flag utilizada para deixar n√≠tido que as imagens precisa ser constru√≠das novamente utilizando o compose.
- docker-compose up | Comando usado junto com a flag anterior.
    - Exemplo: docker-compose up -d --build

- DESCENDO TODOS OS SERVI√áOS!

- O ato de parar a excu√ß√£o de todos os seri√ßos do compose √© chamado de descer.

- docker-compose down | Comando utilizado para descer os servi√ßos. Com esse comando, todos os containers ser√£o parados e removidos.

- SUBINDO SERVI√áOS ESPEC√çFICOS!

- docker-compose up <servi√ßo> | Para subir apenas parte dos servi√ßos ou um servi√ßo espec√≠fico.

- VISUALIZANDO OS LOGS DOS SERVI√áOS!

- docker-compose logs <nome-do-servi√ßo> | Para ver os logs de servi√ßos  de maneira semelhante como fazemos unitariamente com os containers.
    - Aqui, √© poss√≠vel especificar um servi√ßo para visualizar seus logs ou ver todos os logs de todo o ambiente, conforme o arquivo do Compose.

- docker-compose logs <servi√ßo> | Visualizando os logs do servi√ßo.

- docker-compose logs --tail 5 database | A flag | --tail | √© usada para limitar a quantidade de linhas de logs retornadas pelo comando, seguido do n√∫mero de linhas.

- -f ou --follow | Usadas para acompanhar em tempo real as sa√≠das dos containers. Para sair, use | Ctrl+C | ou | Command+C |

- ARQUIVOS COMPOSE MAIS ROBUSTOS!

- Criar volumes: s√£o pastas dentro de um servi√ßo que √© persistente, ou seja, mesmo ap√≥s descer o servi√ßo, esta pasta ainda mant√©m seus arquivos na pr√≥xima vez que os servi√ßos subirem.

- Criar redes virtuais: onde alguns servi√ßos podem se comunicar apenas em uma rede virtual #1, enquanto outros servi√ßos podem se comunicar apenas em uma rede virtual #2.

- <nome-do-volume>:<caminho-no-container-para-montar> | No servi√ßo database, o caminho | /data/db | ser√° persistido, mesmo se a gente descer e subir este servi√ßo novamente! Exemplo: 
    volumes:
      - dados-do-banco:/data/db    # nome do disco virtual : caminho no container
      - Por que mapear o caminho ‚Äú/data/db‚Äù? ü§î como este banco de dados √© um MongoDB, seus dados s√£o armazenados nesta pasta espec√≠fica, segundo sua documenta√ß√£o.
      - Tamb√©m houve um mapeamento de volume no servi√ßo de front-end! Na nova chave | volumes | a pasta do computador local | ./logs | √© mapeada para uma pasta dentro do servi√ßo de frontend | /var/log/frontend |
      - Dessa forma, n√£o √© necess√°rio criar volumes virtuais, pois estamos usando uma pasta do nosso pr√≥prio computador!
      Exemplo:
          volumes:
            - ./logs:/var/log/frontend    # caminho no computador : caminho no container

- CRIANDO REDES VIRTUAIS!

- O Compose nos permite criar m√∫ltiplas redes virtuais entre os servi√ßos. Isso √© muito importante, pois nos permite criar arquiteturas mais seguras.
    - O servi√ßo front-end s√≥ precisa se comunicar diretamente com o back-end;
    - O servi√ßo back-end precisa se comunicar tanto com o front-end quanto com o database;
    - O servi√ßo database s√≥ precisa se comunicar diretamente com o back-end.

- networks | Nova chave criada. Explica√ß√£o:
    - Em cada linha declaramos o nome de uma nova rede virtual;
    - As redes virtuais permitem criar isolamento entre os servi√ßos;
    - Ao utilizar esta chave, o Compose n√£o vai mais criar a rede virtual padr√£o, como estava fazendo antes!

- networks | essa chave tamb√©m √© adicionada em cada servi√ßo. Explica√ß√£o:
    - Para o front-end, declaramos que ele est√° presente na rede-virtual-1;
    - Para o back-end, declaramos que ele est√° presente na rede-virtual-1 e na rede-virtual-2;
    - Para o database, declaramos que ele est√° presente na rede-virtual-2.

------------------------------------------

- docker-compose up | Aceita a flag:
- --scale service=<n√∫mero-de-replicas> | Onde √© poss√≠vel configurar a quantidade de r√©plicas para um servi√ßo.

- O Compose chama os containers orquestrados de servi√ßo para possibilitar a cria√ß√£o de v√°rias r√©plicas, desde que a situa√ß√£o se mostre necess√°ria para isso. 